{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"2MAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAmBA,OACI,mCACI,sBAAMC,SAdO,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAQ,IAC1BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MASd,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAvBU,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,e,+BCPlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAGAI,MAAQF,GAHR,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAM,CACFC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAVvB,kBAabM,GAba,4CAAH,sDCAPO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAMjC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCLHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAGtB,ECNyB,SAACA,GAC1B,MAA0Bd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAuBA,OAlBAC,qBAAU,WAETxB,EAAQC,GACPwB,MAAK,SAAAC,GAGEH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAOnB,CAACpB,IAGGqB,EDlBwBK,CAAa1B,GAAhCa,EAAZ,EAAON,KAAaa,EAApB,EAAoBA,QAInB,OACI,qCACA,oBAAIJ,UAAU,kBAAd,SAAiChB,IAE5BoB,GAAW,wCACf,qBAAKJ,UAAU,YAAf,SAGWH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEqBjBgB,EApCM,WAGlB,MAAoCzC,mBAAS,CAAE,cAA/C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAWA,OACI,qCACG,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGD,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAUA,GADLA,YC1B3B6B,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.7dacb461.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('');\n\n    const handleInputChange = (e) => {\n     \n        setInputValue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault(); // para prevenir el comportamiento default del formulario\n\n        if( inputValue.trim().length >2){\n            setCategories(cats => [inputValue, ...cats]);\n            setInputValue('');\n        }\n        // console.log('submit hecho');\n        \n    }\n\n\n    return (\n        <>\n            <form onSubmit={handleSubmit}>\n                <input \n                    type=\"text\"\n                    value={inputValue}\n                    onChange={handleInputChange}//se activa cada vez que la caja de texto cambie\n                />\n            </form>\n           \n        </>\n    )\n}\n\nAddCategory.propTypes= {\n    setCategories:PropTypes.func.isRequired\n}\n","\n\nexport const getGifs = async(category) => {\n\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=U2Rm3RD68Jamrtpa08qVNLxnssj1r5ZZ`;\n    const resp = await fetch ( url );\n    const {data} = await resp.json();\n    \n    const gifs = data.map( img => {\n        return{\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n   return gifs;\n  \n}","import React from 'react'\n\nexport const GifGridItem = ({ title, url}) => {\n\n\n    // console.log(id, title, url);\n\n\n    return (\n        <div className=\"card animate__animated animate__fadeIn\">\n            <img src={url} alt={title}></img>\n            <p>{title}</p>\n    \n        </div>\n    )\n}\n\n\n","import React, {useState, useEffect} from 'react'\nimport { useFetchGifs } from '../hooks/useFetchGifs'\nimport { GifGridItem } from './GifGridItem';\n\n\n\nexport const GifGrid = ({category}) => {\n\n    \n   const {data:images, loading} = useFetchGifs(category);\n    \n   \n\n    return (\n        <>\n        <h3 className=\"animate__fadeIn\">{category}</h3>\n            {/* {loading ? <p>Loading</p> : null} si es true muestra loading, caso contrario no muestra nada */}\n            {loading && <p>Loading</p>} \n         <div className=\"card-grid\">\n         \n                {\n                    images.map( img => (\n                        <GifGridItem \n                        key={img.id}\n                        {...img}\n\n                        />\n                    ))\n                }\n        </div> \n        </>\n    )\n}\n","import { useState, useEffect} from \"react\";\nimport {getGifs} from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n   const [state, setState] = useState({\n       data: [],\n       loading: true\n   });\n\n   useEffect(()=> {\n\n    getGifs(category)\n    .then(imgs => {\n\n     \n            setState({\n                data: imgs,\n                loading: false\n            });\n       \n\n        \n    })\n\n   }, [category])\n   \n\n   return state; // {data:[], loading:true}\n}\n","import React, {useState} from 'react'\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\n\n//sfc stateless functional component  (raft o sfc )\n\n\n const GifExpertApp = () => {\n\n  \n    const [categories, setCategories] = useState([ 'one punch' ]);\n\n\n    //TAREA: esta funcion tiene q agregar un nuevo elemento al arreglo\n    // const handleAdd = ()=>{\n    //    setCategories([...categories, 'naruto']);\n\n    // setCategories(cats => [...cats, 'hunterXhunter']);\n        \n    // }\n\n    return (\n        <>\n           <h2>Gif Expert App</h2> \n           <AddCategory setCategories={setCategories}/>\n           <hr />\n\n          \n          <ol>\n              {\n                  categories.map( category =>(\n                      <GifGrid \n                      key={category}\n                      category={category}\n                      />\n                  ))\n                  \n              }\n          </ol>\n        </>\n    )\n}\n\n export default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from './GifExpertApp';\n\n\n\nReactDOM.render(\n\n    <GifExpertApp />,\n    \n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}